// Generated by CoffeeScript 1.4.0
(function() {
  var $, Acoutips;

  $ = jQuery;

  Acoutips = {
    init: function(options, elem) {
      var _this = this;
      this.elem = elem;
      this.$elem = $(elem);
      this.on = typeof options === 'string' ? options : options.on;
      this.options = $.extend({}, $.fn.acoutips.options, options);
      this.$elem.on(this.on, function(e) {
        _this.show(_this.$elem);
        if (_this.on === 'click') {
          return e.preventDefault;
        }
      });
      return this.$elem.on(this.options.off, function(e) {
        return _this.hide(_this.$elem);
      });
    },
    show: function(e) {
      if (e.next().attr('class') === this.options.classes) {
        return e.next().show();
      } else {
        this.log(e.data('tip'));
        return $('<div></div>', {
          text: e.data('tip' || e.attr('title')),
          "class": this.options.classes
        }).insertAfter(e);
      }
    },
    hide: function(e) {
      if (e.next().attr('class') === this.options.classes) {
        return e.next().hide();
      }
    },
    log: function(msg) {
      if (this.options.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    }
  };

  $.fn.acoutips = function(options) {
    return this.each(function() {
      var acoutips;
      acoutips = Object.create(Acoutips);
      return acoutips.init(options, this);
    });
  };

  $.fn.acoutips.options = {
    on: 'mouseover',
    off: 'mouseout',
    classes: 'acoutip_tooltip',
    position: 'bottom left',
    xOffset: 0,
    yOffset: 0,
    responsive: true,
    debug: false
  };

}).call(this);
